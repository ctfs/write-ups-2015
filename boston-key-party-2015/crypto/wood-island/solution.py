#!/usr/bin/python2

import sys
sys.setrecursionlimit(150000)

import hashlib
import json
from dsa import elgamal_verify
from dsa_prime import SAFEPRIME as p, GENERATOR as g
from hacklib.sockets import S
from hacklib.crypto import proof_of_work, modinv

MSG = "There is no need to be upset"

# From sigs.txt
r1 = 15596574224423604337174975776788465266479462558269645435687330615427783442319450174310669167504694165949734195772140468403401519160093357880254143018633950179114008556651092403391366077557363361555123124177670387232880718011385652224689886844787549431939261644192798219757366042713163922831165605478332687249430607990154018556718572496906645239311390495141354282987806832079357224945158666328969818853986069540836255016227603632402476397515152119360294922495895244235309968400537736534622122663697025389872185310053285819453794953849878570802282548259719716065417998189738453640724390984216257023730024188208988434794
r2 = 15596574224423604337174975776788465266479462558269645435687330615427783442319450174310669167504694165949734195772140468403401519160093357880254143018633950179114008556651092403391366077557363361555123124177670387232880718011385652224689886844787549431939261644192798219757366042713163922831165605478332687249430607990154018556718572496906645239311390495141354282987806832079357224945158666328969818853986069540836255016227603632402476397515152119360294922495895244235309968400537736534622122663697025389872185310053285819453794953849878570802282548259719716065417998189738453640724390984216257023730024188208988434794
s1 = 20950544720225190240516588643124156640166137751307772794120839122642879744566309989204234525193060193095734419581892490241084064977398989989423034374978973475972879096343609617333859217032402467474794063367359126064209414247112196692749986283927599483857635906461630946699655333336064650658571060838418022831773012112148484373450539087980144060939705883970226872558602362137321434221468807558634789744082687788692428002582578979320390623784385653753663765668912704533244714593744067390408848738952250051111603136134591670549919971405683223154547996667007410471545395238084694224087888217638321220704877088996234667758
s2 = 20193160426525825914749944534502183854793246273057225225204130786954179606391520252397561856344584750457489718289118609515303464507510251417077403315954173676057341891301159286752647600395198190644724307893515345893595410667424425312908674343690968733843740920409803587443515922925501638028491932183400780974410265039483539351372898810463837406346416273301833999371981123383744331959625540606861187311099827640470542835373136973637049034852358457864170556183428016586548277807973991611705101720973851865311156212618466002189499709957796272187041939722207610584175170433726950035007314375587759506260786928657084551208
m1 = "'\"o%^W?GuXkB$4[>kW\">FK|9+K.];P6/fWW8TVbiJD2CYtpcnM"
m2 = "O2,EmP|,!K5F?m]eI;;:V"

assert 0 < r1 < p
assert 0 < s1 < p-1
assert 0 < r2 < p
assert 0 < s2 < p-1
assert elgamal_verify(r1, s1, m1)
assert elgamal_verify(r2, s2, m2)
m1 = int(hashlib.sha384(m1).hexdigest(), 16)
m2 = int(hashlib.sha384(m2).hexdigest(), 16)

half = (p-1)/2

###################
k = (modinv(s1-s2, half) * (m1-m2)) % (p-1)
k += half
print 'k', k
print
assert r1 % p == pow(g, k, p)
###################

xr = (m1 - k*s1) % (p-1)
print 'x*r', xr
print

x = modinv(r1/2, half) * xr/2
x += half
x %= p-1
assert m1 % (p-1) == (x * r1 + k * s1) % (p-1), 'Wrong x?'
assert m2 % (p-1) == (x * r2 + k * s2) % (p-1), 'Wrong x?'

k = 3
r = pow(g, k, p)
m = int(hashlib.sha384(MSG).hexdigest(), 16)
s = (m - x*r) * modinv(k, p-1)
s %= p-1
assert s != 0
assert elgamal_verify(r, s, MSG)

sock = S('52.0.217.48', 60231)
proof = proof_of_work(sock.recvall(12), '\xff\xff\xff', 20)
sock.send(proof)
sock.send(json.dumps({'r': r, 's': s, 'm': MSG}))
print sock.recv(1000), sock.recv(1000), sock.recv(1000)
